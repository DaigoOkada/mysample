// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GibbsNormal
List GibbsNormal(NumericVector x, double init, double mu0, double sigma20, double a, double b, int iter);
RcppExport SEXP _mysample_GibbsNormal(SEXP xSEXP, SEXP initSEXP, SEXP mu0SEXP, SEXP sigma20SEXP, SEXP aSEXP, SEXP bSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma20(sigma20SEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(GibbsNormal(x, init, mu0, sigma20, a, b, iter));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
double timesTwo(double x);
RcppExport SEXP _mysample_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mysample_GibbsNormal", (DL_FUNC) &_mysample_GibbsNormal, 7},
    {"_mysample_timesTwo", (DL_FUNC) &_mysample_timesTwo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mysample(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
